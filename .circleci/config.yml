version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:13.8.0
  ansible:
    docker:
      - image: cytopia/ansible:latest-aws
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
      - run:
          name: Destroy udapeople backend cfn stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H --request GET https://kvdb.io/A47ubUVav1gPEE3oksfSYY/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "1" ]]
            then
              pwd
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Check vulnerability
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Check vulnerability
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor:
      name: aws
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save backend URL in kvdb
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            curl https://kvdb.io/A47ubUVav1gPEE3oksfSYY/BACKEND_URL -d "http://$BACKEND_IP:3030"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    executor:
      name: ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "35:ce:e5:4b:d5:09:6c:1d:be:8d:98:17:56:6f:82:10"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apk add --no-cache tar gzip
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    executor:
      name: node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/A47ubUVav1gPEE3oksfSYY/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    executor:
      name: ansible
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl rsync openssh nodejs npm
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl https://kvdb.io/A47ubUVav1gPEE3oksfSYY/BACKEND_URL)
            echo "${API_URL}"
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    executor:
      name: ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "35:ce:e5:4b:d5:09:6c:1d:be:8d:98:17:56:6f:82:10"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl rsync
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml -vv
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    executor:
      name: aws
    steps:
      - run:
          name: Install dependencies
          command: |
            yum update -y   && yum install -y curl openssh
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export API_URL=$(curl https://kvdb.io/A47ubUVav1gPEE3oksfSYY/BACKEND_URL)
            echo $API_URL
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    executor:
      name: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum install -y curl openssh nodejs npm
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $0ldWorkflowID >> ~/0ldWorkflowID.txt
            cat ~/0ldWorkflowID.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "InitialStack" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo 0ldWorkflowID: "$OldWorkflowID"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
      executor:
        name: aws
      steps:
        - run:
            name: Get old stack workflow id
            command: |
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"  
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
                echo "------------------------- Delete confirmed -------------------------------"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]